/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "./gen-cpp2/EchoService.h"
#include "./gen-cpp2/EchoService.tcc"

#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
#include <thrift/lib/cpp2/protocol/Protocol.h>

namespace tamvm { namespace cpp2 {
std::unique_ptr<apache::thrift::AsyncProcessor> EchoServiceSvIf::getProcessor() 
{
  DLOG(INFO) << "tamvm::cpp2::EchoServiceSvIf::getProcessor";
  return std::make_unique<EchoServiceAsyncProcessor>(this);
}

void EchoServiceSvIf::echo( ::tamvm::cpp2::EchoResponse& /*_return*/, 
    std::unique_ptr< ::tamvm::cpp2::EchoRequest> /*request*/)     
{
  apache::thrift::detail::si::throw_app_exn_unimplemented("echo");
}

folly::Future<std::unique_ptr< ::tamvm::cpp2::EchoResponse>> 
EchoServiceSvIf::future_echo(std::unique_ptr< ::tamvm::cpp2::EchoRequest> request) 
{

  DLOG(INFO) << "tamvm::cpp2::EchoServiceSvIf::future_echo: 1, single";
  return apache::thrift::detail::si::future_returning_uptr([&]( ::tamvm::cpp2::EchoResponse& _return) { 
    
    DLOG(INFO) << "tamvm::cpp2::EchoServiceSvIf::future_echo: 2, lambda";
    echo(_return, std::move(request)); 
    
    DLOG(INFO) << "tamvm::cpp2::EchoServiceSvIf::future_echo: 3, lambda end";
  });
}

void EchoServiceSvIf::async_tm_echo(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::tamvm::cpp2::EchoResponse>>> callback, 
    std::unique_ptr< ::tamvm::cpp2::EchoRequest> request) 
{

  DLOG(INFO) << "tamvm::cpp2::EchoServiceSvIf::async_tm_echo: 1";
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { 
    
    DLOG(INFO) << "tamvm::cpp2::EchoServiceSvIf::async_tm_echo: 2";
    // return future_echo(std::move(request));
    auto ret = future_echo(std::move(request));

    DLOG(INFO) << "tamvm::cpp2::EchoServiceSvIf::async_tm_echo: 3";
    return ret;
  });

  DLOG(INFO) << "tamvm::cpp2::EchoServiceSvIf::async_tm_echo: 4, end";
}

void EchoServiceSvNull::echo( ::tamvm::cpp2::EchoResponse& /*_return*/, std::unique_ptr< ::tamvm::cpp2::EchoRequest> /*request*/) {}

const char* EchoServiceAsyncProcessor::getServiceName() {
  return "EchoService";
}

folly::Optional<std::string> EchoServiceAsyncProcessor::getCacheKey(folly::IOBuf* buf, apache::thrift::protocol::PROTOCOL_TYPES protType) {
  return apache::thrift::detail::ap::get_cache_key(buf, protType, cacheKeyMap_);
}

void EchoServiceAsyncProcessor::process(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, 
    std::unique_ptr<folly::IOBuf> buf, 
    apache::thrift::protocol::PROTOCOL_TYPES protType, 
    apache::thrift::Cpp2RequestContext* context, 
    folly::EventBase* eb, 
    apache::thrift::concurrency::ThreadManager* tm) 
{
  DLOG(INFO) << "tamvm::cpp2::EchoServiceAsyncProcessor::process: 1";
  apache::thrift::detail::ap::process(this, std::move(req), std::move(buf), protType, context, eb, tm);

  DLOG(INFO) << "tamvm::cpp2::EchoServiceAsyncProcessor::process: 2, end";
}

bool EchoServiceAsyncProcessor::isOnewayMethod(const folly::IOBuf* buf, const apache::thrift::transport::THeader* header) {
  return apache::thrift::detail::ap::is_oneway_method(buf, header, onewayMethods_);
}

std::unordered_set<std::string> EchoServiceAsyncProcessor::onewayMethods_ {};
std::unordered_map<std::string, int16_t> EchoServiceAsyncProcessor::cacheKeyMap_ {};
const EchoServiceAsyncProcessor::BinaryProtocolProcessMap& EchoServiceAsyncProcessor::getBinaryProtocolProcessMap() {
  return binaryProcessMap_;
}

const EchoServiceAsyncProcessor::BinaryProtocolProcessMap EchoServiceAsyncProcessor::binaryProcessMap_ {
  {"echo", &EchoServiceAsyncProcessor::_processInThread_echo<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
};

const EchoServiceAsyncProcessor::CompactProtocolProcessMap& EchoServiceAsyncProcessor::getCompactProtocolProcessMap() {
  return compactProcessMap_;
}

const EchoServiceAsyncProcessor::CompactProtocolProcessMap EchoServiceAsyncProcessor::compactProcessMap_ {
  {"echo", &EchoServiceAsyncProcessor::_processInThread_echo<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
};


int EchoServiceAsyncProcessor::global_id = 0;

}} // tamvm::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
