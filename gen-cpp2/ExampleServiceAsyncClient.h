/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <folly/futures/Future.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <thrift/lib/cpp2/async/AsyncClient.h>
#include <thrift/lib/cpp2/async/FutureRequest.h>
#include "./gen-cpp2/example_types.h"

namespace folly {
  class IOBuf;
  class IOBufQueue;
}
namespace apache { namespace thrift {
  class Cpp2RequestContext;
  class BinaryProtocolReader;
  class CompactProtocolReader;
  namespace transport { class THeader; }
}}

namespace tamvm { namespace cpp2 {

class ExampleServiceAsyncClient : public apache::thrift::GeneratedAsyncClient {
 public:
  using apache::thrift::GeneratedAsyncClient::GeneratedAsyncClient;

  char const* getServiceName() const noexcept override {
    return "ExampleService";
  }

  virtual void get_number(std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t number);
  virtual void get_number(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t number);
 private:
  virtual void get_numberImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t number);
 public:
  virtual int64_t sync_get_number(int32_t number);
  virtual int64_t sync_get_number(apache::thrift::RpcOptions& rpcOptions, int32_t number);
  virtual folly::Future<int64_t> future_get_number(int32_t number);
  virtual folly::SemiFuture<int64_t> semifuture_get_number(int32_t number);
  virtual folly::Future<int64_t> future_get_number(apache::thrift::RpcOptions& rpcOptions, int32_t number);
  virtual folly::SemiFuture<int64_t> semifuture_get_number(apache::thrift::RpcOptions& rpcOptions, int32_t number);
  virtual folly::Future<std::pair<int64_t, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_get_number(apache::thrift::RpcOptions& rpcOptions, int32_t number);
  virtual folly::SemiFuture<std::pair<int64_t, std::unique_ptr<apache::thrift::transport::THeader>>> header_semifuture_get_number(apache::thrift::RpcOptions& rpcOptions, int32_t number);
  virtual void get_number(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, int32_t number);
  static folly::exception_wrapper recv_wrapped_get_number(int64_t& _return, ::apache::thrift::ClientReceiveState& state);
  static int64_t recv_get_number(::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual int64_t recv_instance_get_number(::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_get_number(int64_t& _return, ::apache::thrift::ClientReceiveState& state);
 private:
  template <typename Protocol_>
  void get_numberT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t number);
 public:
};

}} // tamvm::cpp2
