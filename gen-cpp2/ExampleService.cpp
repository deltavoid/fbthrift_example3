/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "./gen-cpp2/ExampleService.h"
#include "./gen-cpp2/ExampleService.tcc"

#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
#include <thrift/lib/cpp2/protocol/Protocol.h>

namespace tamvm { namespace cpp2 {
std::unique_ptr<apache::thrift::AsyncProcessor> ExampleServiceSvIf::getProcessor() {
  return std::make_unique<ExampleServiceAsyncProcessor>(this);
}

int32_t ExampleServiceSvIf::get_number(int32_t /*number*/) {
  apache::thrift::detail::si::throw_app_exn_unimplemented("get_number");
}

folly::SemiFuture<int32_t> ExampleServiceSvIf::semifuture_get_number(int32_t number) {
  return apache::thrift::detail::si::semifuture([&] { return get_number(number); });
}

folly::Future<int32_t> ExampleServiceSvIf::future_get_number(int32_t number) {
  return apache::thrift::detail::si::future(semifuture_get_number(number), getThreadManager());
}


void ExampleServiceSvIf::async_tm_get_number(std::unique_ptr<apache::thrift::HandlerCallback<int32_t>> callback, int32_t number) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_get_number(number); });
}

int32_t ExampleServiceSvNull::get_number(int32_t /*number*/) {
  return 0;
}

const char* ExampleServiceAsyncProcessor::getServiceName() {
  return "ExampleService";
}

folly::Optional<std::string> ExampleServiceAsyncProcessor::getCacheKey(folly::IOBuf* buf, apache::thrift::protocol::PROTOCOL_TYPES protType) {
  return apache::thrift::detail::ap::get_cache_key(buf, protType, cacheKeyMap_);
}

void ExampleServiceAsyncProcessor::process(std::unique_ptr<apache::thrift::ResponseChannelRequest> req, std::unique_ptr<folly::IOBuf> buf, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  apache::thrift::detail::ap::process(this, std::move(req), std::move(buf), protType, context, eb, tm);
}

bool ExampleServiceAsyncProcessor::isOnewayMethod(const folly::IOBuf* buf, const apache::thrift::transport::THeader* header) {
  return apache::thrift::detail::ap::is_oneway_method(buf, header, onewayMethods_);
}

std::unordered_set<std::string> ExampleServiceAsyncProcessor::onewayMethods_ {};
std::unordered_map<std::string, int16_t> ExampleServiceAsyncProcessor::cacheKeyMap_ {};
const ExampleServiceAsyncProcessor::BinaryProtocolProcessMap& ExampleServiceAsyncProcessor::getBinaryProtocolProcessMap() {
  return binaryProcessMap_;
}

const ExampleServiceAsyncProcessor::BinaryProtocolProcessMap ExampleServiceAsyncProcessor::binaryProcessMap_ {
  {"get_number", &ExampleServiceAsyncProcessor::_processInThread_get_number<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
};

const ExampleServiceAsyncProcessor::CompactProtocolProcessMap& ExampleServiceAsyncProcessor::getCompactProtocolProcessMap() {
  return compactProcessMap_;
}

const ExampleServiceAsyncProcessor::CompactProtocolProcessMap ExampleServiceAsyncProcessor::compactProcessMap_ {
  {"get_number", &ExampleServiceAsyncProcessor::_processInThread_get_number<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
};

}} // tamvm::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
