/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#include "./gen-cpp2/EchoServiceAsyncClient.h"

#include <folly/io/IOBuf.h>
#include <folly/io/IOBufQueue.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <thrift/lib/cpp/transport/THeader.h>
#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
#include <thrift/lib/cpp2/server/Cpp2ConnContext.h>
#include <thrift/lib/cpp2/GeneratedCodeHelper.h>
#include <thrift/lib/cpp2/GeneratedSerializationCodeHelper.h>

namespace tamvm { namespace cpp2 {
typedef apache::thrift::ThriftPresult<false, apache::thrift::FieldData<1, apache::thrift::protocol::T_STRUCT,  ::tamvm::cpp2::EchoRequest*>> EchoService_echo_pargs;
typedef apache::thrift::ThriftPresult<true, apache::thrift::FieldData<0, apache::thrift::protocol::T_STRUCT,  ::tamvm::cpp2::EchoResponse*>> EchoService_echo_presult;

template <typename Protocol_>
void EchoServiceAsyncClient::echoT(Protocol_* prot, bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::tamvm::cpp2::EchoRequest& request) {
  struct HeaderAndConnContext {
    HeaderAndConnContext() : header(apache::thrift::transport::THeader::ALLOW_BIG_FRAMES) {}

    apache::thrift::transport::THeader header;
    apache::thrift::Cpp2ConnContext connContext;
  };
  auto headerAndConnContext = std::make_shared<HeaderAndConnContext>();
  std::shared_ptr<apache::thrift::transport::THeader> header(headerAndConnContext, &headerAndConnContext->header);
  header->setProtocolId(getChannel()->getProtocolId());
  header->setHeaders(rpcOptions.releaseWriteHeaders());
  headerAndConnContext->connContext.setRequestHeader(header.get());
  std::unique_ptr<apache::thrift::ContextStack> ctx = this->getContextStack(this->getServiceName(), "EchoService.echo", &headerAndConnContext->connContext);
  EchoService_echo_pargs args;
  args.get<0>().value = const_cast< ::tamvm::cpp2::EchoRequest*>(&request);
  auto sizer = [&](Protocol_* p) { return args.serializedSizeZC(p); };
  auto writer = [&](Protocol_* p) { args.write(p); };
  apache::thrift::clientSendT<Protocol_>(prot, rpcOptions, std::move(callback), std::move(ctx), header, channel_.get(), "echo", writer, sizer, apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE, useSync);
  headerAndConnContext->connContext.setRequestHeader(nullptr);
}



void EchoServiceAsyncClient::echo(std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::tamvm::cpp2::EchoRequest& request) {
  ::apache::thrift::RpcOptions rpcOptions;
  echoImpl(false, rpcOptions, std::move(callback), request);
}

void EchoServiceAsyncClient::echo(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::tamvm::cpp2::EchoRequest& request) {
  echoImpl(false, rpcOptions, std::move(callback), request);
}

void EchoServiceAsyncClient::echoImpl(bool useSync, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, const  ::tamvm::cpp2::EchoRequest& request) {
  switch(getChannel()->getProtocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolWriter writer;
      echoT(&writer, useSync, rpcOptions, std::move(callback), request);
      break;
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolWriter writer;
      echoT(&writer, useSync, rpcOptions, std::move(callback), request);
      break;
    }
    default:
    {
      apache::thrift::detail::ac::throw_app_exn("Could not find Protocol");
    }
  }
}

void EchoServiceAsyncClient::sync_echo( ::tamvm::cpp2::EchoResponse& _return, const  ::tamvm::cpp2::EchoRequest& request) {
  ::apache::thrift::RpcOptions rpcOptions;
  sync_echo(rpcOptions, _return, request);
}

void EchoServiceAsyncClient::sync_echo(apache::thrift::RpcOptions& rpcOptions,  ::tamvm::cpp2::EchoResponse& _return, const  ::tamvm::cpp2::EchoRequest& request) {
  apache::thrift::ClientReceiveState _returnState;
  auto callback = std::make_unique<apache::thrift::ClientSyncCallback>(
      &_returnState, apache::thrift::RpcKind::SINGLE_REQUEST_SINGLE_RESPONSE);
  echoImpl(true, rpcOptions, std::move(callback), request);
  SCOPE_EXIT {
    if (_returnState.header() && !_returnState.header()->getHeaders().empty()) {
      rpcOptions.setReadHeaders(_returnState.header()->releaseHeaders());
    }
  };
  if (!_returnState.buf()) {
    assert(!!_returnState.exception());
    _returnState.exception().throw_exception();
  }
  recv_echo(_return, _returnState);
}

folly::Future< ::tamvm::cpp2::EchoResponse> EchoServiceAsyncClient::future_echo(const  ::tamvm::cpp2::EchoRequest& request) {
  ::apache::thrift::RpcOptions rpcOptions;
  return future_echo(rpcOptions, request);
}

folly::SemiFuture< ::tamvm::cpp2::EchoResponse> EchoServiceAsyncClient::semifuture_echo(const  ::tamvm::cpp2::EchoRequest& request) {
  ::apache::thrift::RpcOptions rpcOptions;
  return semifuture_echo(rpcOptions, request);
}

folly::Future< ::tamvm::cpp2::EchoResponse> EchoServiceAsyncClient::future_echo(apache::thrift::RpcOptions& rpcOptions, const  ::tamvm::cpp2::EchoRequest& request) {
  folly::Promise< ::tamvm::cpp2::EchoResponse> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::FutureCallback< ::tamvm::cpp2::EchoResponse>>(std::move(_promise), recv_wrapped_echo, channel_);
  echo(rpcOptions, std::move(callback), request);
  return _future;
}

folly::SemiFuture< ::tamvm::cpp2::EchoResponse> EchoServiceAsyncClient::semifuture_echo(apache::thrift::RpcOptions& rpcOptions, const  ::tamvm::cpp2::EchoRequest& request) {
  auto callbackAndFuture = makeSemiFutureCallback(recv_wrapped_echo, channel_);
  auto callback = std::move(callbackAndFuture.first);
  echo(rpcOptions, std::move(callback), request);
  return std::move(callbackAndFuture.second);
}

folly::Future<std::pair< ::tamvm::cpp2::EchoResponse, std::unique_ptr<apache::thrift::transport::THeader>>> EchoServiceAsyncClient::header_future_echo(apache::thrift::RpcOptions& rpcOptions, const  ::tamvm::cpp2::EchoRequest& request) {
  folly::Promise<std::pair< ::tamvm::cpp2::EchoResponse, std::unique_ptr<apache::thrift::transport::THeader>>> _promise;
  auto _future = _promise.getFuture();
  auto callback = std::make_unique<apache::thrift::HeaderFutureCallback< ::tamvm::cpp2::EchoResponse>>(std::move(_promise), recv_wrapped_echo, channel_);
  echo(rpcOptions, std::move(callback), request);
  return _future;
}

folly::SemiFuture<std::pair< ::tamvm::cpp2::EchoResponse, std::unique_ptr<apache::thrift::transport::THeader>>> EchoServiceAsyncClient::header_semifuture_echo(apache::thrift::RpcOptions& rpcOptions, const  ::tamvm::cpp2::EchoRequest& request) {
  auto callbackAndFuture = makeHeaderSemiFutureCallback(recv_wrapped_echo, channel_);
  auto callback = std::move(callbackAndFuture.first);
  echo(rpcOptions, std::move(callback), request);
  return std::move(callbackAndFuture.second);
}

void EchoServiceAsyncClient::echo(folly::Function<void (::apache::thrift::ClientReceiveState&&)> callback, const  ::tamvm::cpp2::EchoRequest& request) {
  echo(std::make_unique<apache::thrift::FunctionReplyCallback>(std::move(callback)), request);
}

folly::exception_wrapper EchoServiceAsyncClient::recv_wrapped_echo( ::tamvm::cpp2::EchoResponse& _return, ::apache::thrift::ClientReceiveState& state) {
  if (state.isException()) {
    return std::move(state.exception());
  }
  if (!state.buf()) {
    return folly::make_exception_wrapper<apache::thrift::TApplicationException>("recv_ called without result");
  }

  using result = EchoService_echo_presult;
  constexpr auto const fname = "echo";
  switch (state.protocolId()) {
    case apache::thrift::protocol::T_BINARY_PROTOCOL:
    {
      apache::thrift::BinaryProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state, _return);
    }
    case apache::thrift::protocol::T_COMPACT_PROTOCOL:
    {
      apache::thrift::CompactProtocolReader reader;
      return apache::thrift::detail::ac::recv_wrapped<result>(
          fname, &reader, state, _return);
    }
    default:
    {
    }
  }
  return folly::make_exception_wrapper<apache::thrift::TApplicationException>("Could not find Protocol");
}

void EchoServiceAsyncClient::recv_echo( ::tamvm::cpp2::EchoResponse& _return, ::apache::thrift::ClientReceiveState& state) {
  auto ew = recv_wrapped_echo(_return, state);
  if (ew) {
    ew.throw_exception();
  }
}

void EchoServiceAsyncClient::recv_instance_echo( ::tamvm::cpp2::EchoResponse& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_echo(_return, state);
}

folly::exception_wrapper EchoServiceAsyncClient::recv_instance_wrapped_echo( ::tamvm::cpp2::EchoResponse& _return, ::apache::thrift::ClientReceiveState& state) {
  return recv_wrapped_echo(_return, state);
}

}} // tamvm::cpp2
namespace apache { namespace thrift {

}} // apache::thrift
